/**
 * 
 * 正则表达式: 是一个有规则的式子,规则表达式,有一定的规则,最开始出现在医学
 * 主要的作用:匹配字符串的,
 * 用处:
 * 1.表单验证----前端用的最多
 * 2.下载数据---后台
 * 3.网络爬虫---后台
 * 。。。。。。。
 * 
 * 正则表达式是用元字符组合成的
 * 元字符: 就是一些具有特殊意义的符号
 * 正则表达式:一些具有特殊意义的符号组合成的一个表达式
 * 
 * 正则表达式的元字符: 元字符和限定符
 * 
 */

 /*
 
   元字符:
   .    除了\n以外任意的单个字符   'hello a '
   []   范围和干掉原有的意义  [0-9]   '今天好开心啊,hello 98362?'   [.]  就是普通的点,
        [a-z] 所有的小写字母    [A-Z]  所有的大写字母    [a-zA-Z] [a-zA-Z0-9]

        '98362'   [0-9]

    ()  提升优先级及分组
      [3-8]([.][a-z])  3到8之间任意的一个数字后面是一个.后面是一个小写字母
      分组:   (([a-zA-Z0-9_.-])([@]))  有三组, 每一对括号都是一组,将来是用来替换操作的,从最左边的(计算

        ()(())((()))   RegExp.$3 ='哈哈'

    |  或者     ^(([0-9])|([A-Z]))$    '3D'  

    ^  以什么开始     ^[0-9] '23fsfsdfds'    [^0-9] 取反   [^a-z]
    $  以什么结束     

    限定符:一般都是限定次数的
    {0}  表示的是:当前这个式子前面的表达式出现了0次    [1-5][a-d]{0}
    {0,5} 表示的是: 当前这个式子前面的表达式出现了0次到5次   ^([1-6]{1,5})$  '345678'
    {1,6} 
    {0,} 表示的是:当前这个式子前面的表达式出现了0次到多次
    {0,1}
    {,10} 错误写法-----注意
      通配符-----限定符----元字符
    *  表示的是:当前这个式子前面的表达式出现了0次到多次 {0,}    [*] 就是*
    ?  表示的是:当前这个式子前面的表达式出现了0次到1次  {0,1}   [?]  就是?
    +  表示的是:当前这个式子前面的表达式出现了1次到多次    {1,}  [+] 就是+     [.] 就是点 [^] [@]

    // shuaiyang@126.com [.]

    

    \d   数字中的任意一个     [0-9]

    \D    非数字中的任意一个   [^0-9]

    \s    空白符中的任意一个                          
    \S    非空白符中的任意一个 
    \w    非特殊符号   sfdsf 12313212   _
    \W    特殊符号    $$##@


    \b 边界  'hello world'  'dadasdas dasdasdasd'



    1. 先找规律,不要追求完美
    2. 不要钻牛角尖

    身份证号码的正则表达式

  (\d{17}[xX])|(\d{18})

   ([1-9][0-9]{16}([0-9]|[xX]))|([1-9][0-9]{17})  身份证号码
   ([1-9][0-9]{16})(([0-9])|([xX])) 身份证号码

   手机号码 :  
   130,131,132,133,134,135,136,137,138,139
  
   150,151,152,153,154,155,156,157,158,159
   
   180,181,182,183,184,185,186,187,188,189
   147,
   165,166


  

   170,171,176,177,178,
   198,199

   ([1][358][0-9][0-9]{8})|([1][4][7][0-9]{8})|([1][6][56][0-9]{8})|([1][7][01678][0-9]{8})|([1][9][89][0-9]{8})


   [1][0-9]{10}    [1]\d{10}


    邮箱的正则:  必须给我背下来

    younghongbo_1-2.3@fd12-_.6.com.cn  邮箱

    [a-zA-Z0-9_.-]+[@][a-zA-Z0-9_.-]+([.][a-zA-Z]+){1,2}




    注意:不要用正则实现字符串的方法
    var str=' 哈哈 '
    str=str.trim()  此时str中前后空格已经就被去掉了
    使用正则去掉字符串前后的空格--------可以自己实现的
    如果字符串本身有这个方法可以完成相关功能,那么就不用使用正则,如果字符换中没有这个方法,可以使用正则来实现该功能
    

 



   













 
 
 
 
 
 
 
 
 
 
 */